//BreadthFirst Search Graph Algorithm

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer> bfs=new ArrayList<>();
        Queue<Integer> q=new LinkedList<>();
        boolean[] vis=new boolean[V+1]; 
        q.add(0);
        vis[0]=true;
        while(!q.isEmpty()){
            Integer u=q.poll();
            bfs.add(u);
            for(Integer v:adj.get(u)){//0-1 2 3
                if(vis[v]==false){
                    vis[v]=true;
                    q.add(v);
                }
            }
        }
        return bfs;
    }
}


//Breadth first search Graph 2D matrix. 

class Solution {
    public void findCircleNum(int[][] isConnected) {
        int cities = isConnected.length;
        
        
        boolean[] visited = new boolean[cities];
        Queue<Integer> q = new LinkedList();
        for(int i = 0; i < cities; i++)
        {
            if(!visited[i])
            {
                q.offer(i);
            }
            while(!q.isEmpty())
            {
                int current = q.poll();
                visited[current] = true;
                for(int j = 0; j < cities; j++)
                {
                    if(j != current && isConnected[current][j] == 1 && !visited[j])
                        q.offer(j);
                }
            } 
        }
    
    }

}



Depth first Search // ArrayList

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    ArrayList<Integer> al = new ArrayList<>();
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean visited[]=new boolean[V];
        sol(adj, visited, 0);
        return al;
        
    }
    public void sol(ArrayList<ArrayList<Integer>> adj, boolean visited[], int start){
        visited[start] = true;
        al.add(start);
        for(int x : adj.get(start)){
            if(visited[x] == false){
                sol(adj, visited, x);
            }

        }
    }
}


Depth first Search // 2D Array


class Solution {
    public void findCircleNum(int[][] M) {
        int N = M.length;
        boolean[]visited = new boolean[N];
        
        for(int i = 0; i < N ;i++){
            if(!visited[i]){

                dfs(M,i,visited);
            }
        }
    }
    
    
    private void dfs(int[][]M,int i,boolean[]visited){
        for(int j = 0 ; j < M[i].length ; j++){
            if(!visited[j] && M[i][j] != 0){
                visited[j] = true;
                dfs(M,j,visited);
            }
        }
    }
    


